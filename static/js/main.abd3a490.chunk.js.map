{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","wins","setWins","draws","setDraws","loses","setLoses","botChoice","setBotChoice","jogar","usrCh","botCh","String","Math","random","charAt","Body","Title","Scoreboard","Box","icon","faBirthdayCake","faBalanceScale","faTrash","Game","Button","onClick","faHandRock","faHandPaper","className","faHandScissors","BotChoice","styled","div","h1","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.abd3a490.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faBirthdayCake,\n  faTrash,\n  faBalanceScale,\n  faHandPaper,\n  faHandScissors,\n  faHandRock,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nfunction App() {\n  const [wins, setWins] = useState(0);\n  const [draws, setDraws] = useState(0);\n  const [loses, setLoses] = useState(0);\n  const [botChoice, setBotChoice] = useState(null);\n\n  function jogar(usrCh) {\n    //Variáveis\n    var botCh = String(Math.random() * 3).charAt(0);\n    setBotChoice(botCh);\n\n    //Regras básicas do Pedra, Papel e Tesoura\n    if (\n      (usrCh == 0 && botCh == 2) ||\n      (usrCh == 1 && botCh == 0) ||\n      (usrCh == 2 && botCh == 1)\n    ) {\n      setWins(wins + 1);\n    }\n    if (\n      (botCh == 0 && usrCh == 2) ||\n      (botCh == 1 && usrCh == 0) ||\n      (botCh == 2 && usrCh == 1)\n    ) {\n      setLoses(loses + 1);\n    }\n    if (usrCh == botCh) {\n      setDraws(draws + 1);\n    }\n  }\n\n  function renderBotChoice() {\n    if (botChoice == 0) {\n      return <FontAwesomeIcon icon={faHandRock} />;\n    } else if (botChoice == 1) {\n      return <FontAwesomeIcon icon={faHandPaper} />;\n    } else if (botChoice == 2) {\n      return <FontAwesomeIcon icon={faHandScissors} />;\n    }\n  }\n\n  return (\n    <Body>\n      <Title>Pedra, Papel e Tesoura</Title>\n\n      <Scoreboard>\n        <Box>\n          <FontAwesomeIcon icon={faBirthdayCake} />\n          {wins}\n        </Box>\n        <Box>\n          <FontAwesomeIcon icon={faBalanceScale} />\n          {draws}\n        </Box>\n        <Box>\n          <FontAwesomeIcon icon={faTrash} />\n          {loses}\n        </Box>\n      </Scoreboard>\n\n      <Game>\n        <Box>\n          <h2>Você</h2>\n\n          <Button\n            onClick={() => {\n              jogar(0);\n            }}\n          >\n            <FontAwesomeIcon icon={faHandRock} />\n          </Button>\n          <Button\n            onClick={() => {\n              jogar(1);\n            }}\n          >\n            <FontAwesomeIcon icon={faHandPaper} />\n          </Button>\n          <Button\n            onClick={() => {\n              jogar(2);\n            }}\n          >\n            <FontAwesomeIcon className=\"loses\" icon={faHandScissors} />\n          </Button>\n        </Box>\n\n        <Box>\n          <h2>Máquina</h2>\n          <BotChoice>{renderBotChoice()}</BotChoice>\n        </Box>\n      </Game>\n    </Body>\n  );\n}\n\nexport default App;\n\nconst Body = styled.div`\n  height: 100vh;\n  width: 100%;\n\n  background: #113449;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Title = styled.h1`\n  margin-top: 20px;\n`;\n\nconst Box = styled.div`\n  background: linear-gradient(145deg, #0f2f42, #12384e);\n  box-shadow: 11px 11px 22px #0e2b3d, -11px -11px 22px #143d55;\n  border-radius: 15px;\n\n  padding: 20px;\n\n  font-size: 30px;\n\n  svg {\n    margin-right: 20px;\n  }\n\n  h2 {\n    text-align: center;\n    font-size: 25px;\n  }\n`;\n\nconst Button = styled.div`\n  background: #113449;\n  box-shadow: inset 11px 11px 22px #0e2b3d, inset -11px -11px 22px #143d55;\n  border-radius: 15px;\n  padding: 20px;\n\n  margin: 10px;\n  cursor: pointer;\n  font-size: 30px;\n\n  svg {\n    margin: 0;\n  }\n`;\nconst BotChoice = styled.div`\n  background: #113449;\n  box-shadow: inset 11px 11px 22px #0e2b3d, inset -11px -11px 22px #143d55;\n  border-radius: 15px;\n  padding: 20px;\n\n  margin: 95px 10px;\n  font-size: 30px;\n\n  svg {\n    margin: 0;\n  }\n`;\n\nconst Scoreboard = styled.div`\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 50px;\n\n  margin-bottom: 50px;\n`;\n\nconst Game = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 170px;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}